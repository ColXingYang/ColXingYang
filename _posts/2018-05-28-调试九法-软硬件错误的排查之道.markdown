---
layout: post
title: 调试九法—软硬件错误的排查之道
---
本书讲的是如何排查软硬件中的BUG的方法共9法。这些方法都是比较通用的基础的而且比较容易记忆。这些方法在我们平时其实都在有意无意中用到了，只不过这个外国佬又用大白话给总结了一下，总结一下也好，省的自己总结了，就当是厕所读物读吧，有个印象就好。

理解系统
这个方法是说在我们改BUG前我们需要先对整个系统有深入的了解，这样我们才不是通过巧合编程而是通过对整个系统的了解经过思考而修改的BUG，修改的过程的高度是系统的高度，是全局的眼光而不是一个局部的眼光。否则很可能会改完此处的BUG而引发了别处的BUG，或者自己又制造了BUG。

制造失败
这个方法是说我们在修改BUG前，我们首先要先去想方法去诱发BUG，如果你这个BUG很容易复现，那恭喜你这个BUG比较容易解决，如果你碰到的是个毕现的BUG，那也恭喜你，这个BUG容易解决，如果你碰到了一个偶尔才会发生的间歇性BUG，那么恭喜你，锻炼自己的时候到了，你需要进行大量的测试，包括把所有可能的影响条件都列出来，改变其中一个条件从而看它是否是影响BUG的条件，从而确定BUG查找的方向。如果你做了大量测试还是不行，那么你需要耐心的看LOG，对比正确运行的LOG和BUG出现时的LOG，的不同从而确定BUG，当我们改完后需要看看是否真的是我们修改的地方将BUG消灭掉了。还原我们的做的修改，出现BUG，应用我们的修改BUG不再出现说明的确修改了BUG。

不要想，而要看
虽然我们在看到BUG时，有时能够大概猜测出是哪里的问题，但这些只是为我们提供了方向，我们必须去看看BUG的样子，失败时的LOG，解决BUG不能靠猜测，修改也不能靠猜测。不能想当然。

分而治之；一次只改一个地方
这个方法是说当我们在查找BUG时，一个快速的方法，是在工作流的的中间开始，判断是工作流的上游出错还是工作流的下游出错，当中间这里出现了错误，说明BUG在上游，我们应该顺着工作流往上找，反之亦然。当我们在修改时，我们应该每次只修改一个地方一个BUG，因为只有我们发现我们修改的某个条件是影响BUG 的条件时，我们才算是找到了BUG，也知道了修改的方法。

检查插头
这个方法是告诉我们有时候最简单的最基础的条件，可能就是那个导致BUG 的原因。我们在检查时需要从最基本的地方看起。

获得全新观点
当我们遇到无法解决的BUG时，要虚心向他人请教，尤其是对于相关问题比较了解的专家，要向他们报告程序运行的症状，听取他们意见，这些意见当然也可从网路，书本，等地方去获取

如果你不修复BUG，BUG将依然存在
这个是在告诉我们，要确定BUG确实是被我们的修改所修复，而不是靠的运气，或者其他。当我们去掉我们修改，BUG出现，添加我们的修改BUG不出现，这就是说BUG确实是由于我们修改正确了而被修复了。
